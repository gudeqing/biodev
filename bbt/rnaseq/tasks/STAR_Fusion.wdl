version 1.0

task STAR_Fusion{
    input {
        String? other_parameters
        Int CPU = 8
        Array[File]? left_fq
        Array[File]? right_fq
        File? chimeric_junction
        String genome_lib_dir
        String sample = "fusion"
        String FusionInspector = "inspect"
        Boolean examine_coding_effect = true
        Boolean denovo_reconstruct = true
        # for runtime
        String docker = "trinityctat/starfusion:1.9.1"
        String memory = "32 GiB"
        Int cpu = 1
        String disks = "50 GiB"
        Int time_minutes = 10080
    }

    command <<<
        set -e
        mkdir -p ~{sample}
        STAR-Fusion \
        ~{other_parameters} \
        ~{"--CPU " + CPU} \
        ~{if defined(left_fq) then "--left_fq " else ""}~{sep=" " left_fq} \
        ~{if defined(right_fq) then "--right_fq " else ""}~{sep=" " right_fq} \
        ~{"-J " + chimeric_junction} \
        ~{"--genome_lib_dir " + genome_lib_dir} \
        ~{"--output_dir " + sample} \
        ~{"--FusionInspector " + FusionInspector} \
        ~{if examine_coding_effect then "--examine_coding_effect " else ""} \
        ~{if denovo_reconstruct then "--denovo_reconstruct " else ""} 
    >>>

    output {
        Array[File] extract_fusion_reads =  glob("${sample}/star-fusion.fusion_evidence_*.fq")
        File fusion_predictions = "${sample}/star-fusion.fusion_predictions.tsv"
        File fusion_predictions_abridged = "${sample}/star-fusion.fusion_predictions.abridged.tsv"
        File bam = "${sample}/Aligned.out.bam"
        File star_log_final = "${sample}/Log.final.out"
        File junction = "${sample}/Chimeric.out.junction"
        File sj = "${sample}/SJ.out.tab"
        Array[File] fusion_inspector_validate_fusions_abridged = glob("${sample}/FusionInspector-validate/finspector.FusionInspector.fusions.abridged.tsv")
        Array[File] fusion_inspector_validate_web = glob("${sample}/FusionInspector-validate/finspector.fusion_inspector_web.html")
        Array[File] fusion_inspector_inspect_web = glob("${sample}/FusionInspector-inspect/finspector.fusion_inspector_web.html")
        Array[File] fusion_inspector_inspect_fusions_abridged = glob("${sample}/FusionInspector-inspect/finspector.FusionInspector.fusions.abridged.tsv")
    }

    runtime {
        docker: docker
        memory: memory
        cpu: cpu
        disks: disks
        time_minutes: time_minutes
    }

    meta {
        name: "STAR_Fusion"
        image: "docker pull trinityctat/starfusion"
        desc: "STAR-Fusion is a component of the Trinity Cancer Transcriptome Analysis Toolkit (CTAT). STAR-Fusion uses the STAR aligner to identify candidate fusion transcripts supported by Illumina reads. STAR-Fusion further processes the output generated by the STAR aligner to map junction reads and spanning reads to a reference annotation set."
        logo: "star-fusion.png"
        version: "v1.10.0"
        source: "https://github.com/STAR-Fusion/STAR-Fusion"
        basecmd: "STAR-Fusion"
    }

    parameter_meta {
        other_parameters: {desc: "other arguments, you could set any other argument with a string such as '-i x -j y'", level: "optional", type: "str", value_candidates: ""}
        CPU: {desc: "Number of threads to use", level: "required", type: "int", value_candidates: ""}
        left_fq: {desc: "read1 fastq files, separate by white space", level: "optional", type: "infile", value_candidates: ""}
        right_fq: {desc: "read1 fastq files, separate by white space", level: "optional", type: "infile", value_candidates: ""}
        chimeric_junction: {desc: "generated file called 'Chimeric.out.junction' by STAR alignment", level: "optional", type: "infile", value_candidates: ""}
        genome_lib_dir: {desc: "ctat_genome_lib_build_dir", level: "required", type: "indir", value_candidates: ""}
        sample: {desc: "output directory", level: "required", type: "str", value_candidates: ""}
        FusionInspector: {desc: "FusionInspector that provides a more in-depth view of the evidence supporting the predicted fusions.", level: "required", type: "str", value_candidates: "inspect, validate"}
        examine_coding_effect: {desc: "explore impact of fusions on coding sequences", level: "required", type: "bool", value_candidates: "yes, no"}
        denovo_reconstruct: {desc: "attempt to reconstruct fusion transcripts using Trinity de novo assembly (requires --FusionInspector)", level: "required", type: "bool", value_candidates: "yes, no"}
    }

}
