[tool]
# app名称
name = fastp
# 镜像信息
docker = Dockerfile
# app描述信息
desc = A tool designed to provide fast all-in-one preprocessing for FastQ files. This tool is developed in C++ with multithreading supported to afford high performance. For more detail please refer to https://github.com/OpenGene/fastp
# app的标致
logo = see fastp.png
# app的版本信息
version = 0.21.0
baseCmd = ./fastp

[runtime]
# 支持的字段是wdl的runtime支持的字段
# 以下是关于动态设置memory的技巧:
#  String? memory
#  Int memoryGb = 1 + ceil(size(indexFiles, "G") * 1.3)
#  select_first([memory, "~{memoryGb}G"])
docker = fastp:latest
memory = 1 GiB
cpu = 1
disks = 1 GiB
# 7 days
time_minutes = 10080

[参数属性说明]
type = 表参数类型，如字符串(str), 整数（int), 浮点数（float），布尔值（bool)
is_infile = 表示是否为输入文件，使用yes或no表示
is_outfile = 表示是否为输出文件，使用yes或no表示
input_dir = 表示是否为输入目录
out_dir = 表示是否为输出目录
require = 表示该参数是否必须,使用yes或no表示
prefix = 参数前缀名称, 例如 -i， --i，如果没有前缀，使用none表示, 注意bool参数肯定有前缀，值为yes/no
default = 表示默认值，如果写为none，表示无默认值, 对于bool参数，默认值为yes 或 no
value_candidates = A,B, ...使用逗号分隔每一个参数的候选值， 默认为none，表示无候选值
desc = 参数帮助说明
name = 页面上展示的参数名
format = 对于输入输出文件的格式要求说明，默认为none
multi_values = 表示该参数可以输入多个值,用空格分开，如"-bams file1 file2 file3", 用yes或no表示
multi_times = 表示该参数可以重复输入多次，如"-g v1 -g v2 -g v3", 用yes或no表示
multi_sep = 多个值之间的delimiter, 如果multi_times = yes, 则该忽略该说明。 默认为空格。

[other_args]
# 这个参数要注意其位置是否正确，按照wdl格式化时，顺序和当前脚本中参数出现的顺序一致。
desc = 其他参数，你可以通过该参数输入一个或多个任何其他当前软件支持的参数，例如'-i x -j y'
type = str
is_infile = no
is_outfile = no
require = no
prefix = none
default = none
value_candidates = none
name = other_parameters

[threads]
type = int
is_infile = no
is_outfile = no
require = yes
prefix = --thread
default = 2
value_candidates = none
desc = Number of threads to use
name = threads
format = none

[read1]
type = str
is_infile = yes
is_outfile = no
require = yes
prefix = -i
default = sample.R1.fastq.gz
value_candidates = none
desc = read1 fastq file
name = read1
format = .fastq, .fastq.gz, .fq, .fq.gz

[read2]
type = str
is_infile = yes
is_outfile = no
require = no
prefix = -I
default = sample.R2.fastq.gz
value_candidates = none
desc = read2 fastq file
name = read2
format = .fastq, .fastq.gz, .fq, .fq.gz

[adapter_r1]
type = str
is_infile = no
is_outfile = no
require = no
prefix = --adapter_sequence
default = auto
value_candidates = none
desc = the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto])
name = adapter_r1
format = none

[adapter_r2]
type = str
is_infile = no
is_outfile = no
require = no
prefix = --adapter_sequence_r2
default = auto
value_candidates = none
desc = the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=auto])
name = adapter_r2
format = none

[outfile]
type = str
is_infile = no
is_outfile = yes
require = yes
prefix = -o
default = sample.clean.R1.fastq.gz
value_candidates = none
desc = output read1 fastq file
name = out_read1
format = .fastq, .fastq.gz, .fq, .fq.gz

[outfile2]
type = str
is_infile = no
is_outfile = yes
require = no
prefix = -O
default = sample.clean.R2.fastq.gz
value_candidates = none
desc = output read2 fastq file
name = out_read2
format = .fastq, .fastq.gz, .fq, .fq.gz

[outfile3]
type = str
is_infile = no
is_outfile = yes
require = yes
prefix = -h
default = sample.html
value_candidates = none
desc = output html report file
name = html_report
format = .html

[outfile4]
type = str
is_infile = no
is_outfile = yes
require = yes
prefix = -j
default = sample.json
value_candidates = none
desc = output json report file
name = json_report
format = .json

[outputs]
out_read1_file = File "~{out_read1}"
out_read2_file = File "~{out_read2}"
html_report_file = File  "~{html_report}"
json_report_file = File  "~{json_report}"